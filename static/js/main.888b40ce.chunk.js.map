{"version":3,"sources":["ProblemBrowser/data/store.js","ProblemBrowser/data/actions/constants.js","ProblemBrowser/data/actions/courseBlocks.js","ProblemBrowser/data/reducers/index.js","ProblemBrowser/components/BlockBrowser/BlockBrowser.jsx","ProblemBrowser/data/selectors/index.js","ProblemBrowser/components/BlockBrowser/BlockBrowserContainer.jsx","ProblemBrowser/components/Main/Main.jsx","ProblemBrowser/components/Main/MainContainer.jsx","ProblemBrowser/index.jsx","App.js","registerServiceWorker.js","index.js"],"names":["initialState","courseBlocksActions","SUCCESS","FAILURE","setCourseBlocks","data","dispatch","blocks","type","buildBlockTree","root","blockTree","parent","tree","Object","assign","children","map","block","combineReducers","rawBlocks","state","action","selectedBlock","blockId","rootBlock","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","rootReducer","applyMiddleware","thunkMiddleware","selectedBlockData","rawblocks","console","log","BlockList","onSelectBlock","onChangeRoot","className","key","id","classnames","selected","onClick","e","stopPropagation","display_name","preventDefault","icon","faCaretRight","BlockDataItem","dataItem","startsWith","href","target","rel","Array","isArray","item","blockData","String","BlockDataView","keys","BlockBrowser","this","props","faCaretUp","React","getActiveBlockTree","findBlockWithId","blockList","foundBlock","BlockBrowserContainer","connect","changeRoot","Main","onChangeBlocks","blockfield","value","onDataChange","htmlFor","name","cols","rows","ref","JSON","stringify","MainContainer","selectBlock","parse","ProblemBrowser","App","Component","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.888b40ce.chunk.js","sourcesContent":["import {applyMiddleware, createStore, compose} from 'redux';\nimport data from '../../data.json';\nimport thunkMiddleware from 'redux-thunk';\nimport {setCourseBlocks} from \"./actions/courseBlocks\";\n\nimport rootReducer from './reducers/index';\n\nconst defaultState = {\n    rawBlocks: {},\n    blocks: [],\n    selectedBlock: null,\n    rootBlock: null,\n};\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst configureStore = initialState => createStore(\n    rootReducer,\n    initialState,\n    composeEnhancers(applyMiddleware(thunkMiddleware)),\n\n);\n\n\nconst store = configureStore(defaultState);\n\nstore.dispatch(setCourseBlocks(data));\n\nexport default store;\n","export const courseBlocksActions = {\n    fetch: {\n        SUCCESS: 'FETCH_COURSE_BLOCKS_SUCCESS',\n        FAILURE: 'FETCH_COURSE_BLOCKS_FAILURE',\n    },\n    SELECT_BLOCK: 'SELECT_BLOCK',\n    CHANGE_ROOT: 'CHANGE_ROOT',\n};\n","import {courseBlocksActions} from './constants';\n\nconst setCourseBlocksSuccess = blocks => {\n    return {\n        type: courseBlocksActions.fetch.SUCCESS,\n        blocks,\n    };\n};\n\nconst selectBlock = blockId => ({\n    type: courseBlocksActions.SELECT_BLOCK,\n    blockId,\n});\n\nconst changeRoot = blockId => ({\n    type: courseBlocksActions.CHANGE_ROOT,\n    blockId,\n});\n\nconst setCourseBlocks = data => (dispatch) => {\n    dispatch(setCourseBlocksSuccess(data))\n};\n\nexport {\n    setCourseBlocks,\n    setCourseBlocksSuccess,\n    selectBlock,\n    changeRoot,\n};\n","import {combineReducers} from 'redux';\nimport {courseBlocksActions} from '../actions/constants';\n\nexport const buildBlockTree = (blocks) => {\n    if (!(blocks && blocks.root)) return null;\n    const blockTree = (root, parent) => {\n        const tree = Object.assign({parent}, blocks.blocks[root]);\n        if (tree.children) {\n            tree.children = tree.children.map(block => blockTree(block, root));\n        }\n        return tree;\n    };\n    return blockTree(blocks.root, null);\n};\n\nconst blocks = (state = {}, action) => {\n    switch (action.type) {\n        case courseBlocksActions.fetch.SUCCESS:\n            return buildBlockTree(action.blocks);\n        default:\n            return state;\n    }\n};\n\nconst rawBlocks = (state = {}, action) => {\n    switch (action.type) {\n        case courseBlocksActions.fetch.SUCCESS:\n            return action.blocks;\n        default:\n            return state;\n    }\n};\n\nconst selectedBlock = (state = null, action) => {\n    switch (action.type) {\n        case courseBlocksActions.fetch.SUCCESS:\n            return null;\n        case courseBlocksActions.SELECT_BLOCK:\n            return action.blockId;\n        default:\n            return state;\n    }\n};\n\n\nconst rootBlock = (state = null, action) => {\n    switch (action.type) {\n        case courseBlocksActions.fetch.SUCCESS:\n            return action.blocks.root;\n        case courseBlocksActions.CHANGE_ROOT:\n            return action.blockId;\n        default:\n            return state;\n    }\n};\n\nexport default combineReducers({\n    rawBlocks,\n    blocks,\n    selectedBlock,\n    rootBlock,\n});\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport * as classnames from 'classnames';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCaretRight, faCaretUp } from '@fortawesome/free-solid-svg-icons';\n\nfunction selectedBlockData(rawblocks, selectedBlock) {\n    if (rawblocks && rawblocks.blocks && selectedBlock) {\n        console.log(`Block data for ${selectedBlock}`, rawblocks.blocks[selectedBlock]);\n        return rawblocks.blocks[selectedBlock];\n    } else return {}\n}\n\n\nconst BlockList = ({ blocks, selectedBlock, onSelectBlock, onChangeRoot }) => (\n    <ul className=\"block-list\">\n        {blocks.map(block => (\n            <li key={block.id}\n                className={classnames(`block-type-${block.type}`, { selected: block.id === selectedBlock })}\n                onClick={(e) => {\n                    e.stopPropagation();\n                    onSelectBlock(block.id);\n                }}>\n                <button\n                    className=\"block-name\"\n                    onClick={() => onSelectBlock(block.id)}>{block.display_name}</button>\n                {block.children &&\n                    <button className=\"block-child\" onClick={(e) => {\n                        e.stopPropagation();\n                        e.preventDefault();\n                        onChangeRoot(block.id);\n                    }}>\n                        <FontAwesomeIcon icon={faCaretRight} />\n                    </button>\n                }\n            </li>\n        ))}\n    </ul>\n);\n\nconst BlockDataItem = ({ dataItem }) => {\n    switch (typeof dataItem) {\n        case 'string':\n            // TODO: if text starts with block-v1, add button to navigate to that block\n            if (dataItem.startsWith('http')) {\n                return (\n                    <a href={dataItem} target=\"_blank\" rel=\"noopener noreferrer\">\n                        {dataItem}\n                    </a>\n                );\n            } else return dataItem;\n        case 'object':\n            if (Array.isArray(dataItem)) {\n                return (\n                    <ul>\n                        {dataItem.map(item => (\n                            <li>\n                                <BlockDataItem dataItem={item} />\n                            </li>\n                        ))}\n                    </ul>\n                )\n            } else {\n                return <BlockDataView blockData={dataItem} />;\n            }\n        default:\n            return String(dataItem);\n    }\n\n}\n\n\nconst BlockDataView = ({ blockData }) => (\n    <div className='block-data'>\n        <table>\n            {Object.keys(blockData).map(key => (\n                <tr className='block-data-item'>\n                    <th>{key}</th>\n                    <td><BlockDataItem dataItem={blockData[key]} /></td>\n                </tr>\n            ))}\n        </table>\n    </div>\n)\n\nexport class BlockBrowser extends React.Component {\n    static propTypes = {\n        rawBlocks: PropTypes.object,\n        blocks: PropTypes.object,\n        selectedBlock: PropTypes.string,\n        onSelectBlock: PropTypes.func.isRequired,\n        onChangeRoot: PropTypes.func.isRequired,\n    };\n\n    render() {\n        const { blocks, rawBlocks, selectedBlock, onSelectBlock, onChangeRoot, className } = this.props;\n        if (blocks) {\n            return (\n                <div className={classnames(\"block-browser\", className)}>\n                    <div className=\"browser-container\">\n                        <div className=\"breadcrumb-container\">\n                            <button className=\"block-child\" onClick={(e) => {\n                                e.stopPropagation();\n                                if (blocks.parent) onChangeRoot(blocks.parent);\n                            }}>\n                                <FontAwesomeIcon icon={faCaretUp} />\n                            </button>\n                            <span className=\"block-type\"> {blocks.type}: </span>\n                            <span className=\"block-name\">{blocks.display_name} </span>\n                        </div>\n                        <BlockList blocks={blocks.children}\n                            selectedBlock={selectedBlock}\n                            onSelectBlock={onSelectBlock}\n                            onChangeRoot={onChangeRoot} />\n                    </div>\n                    <BlockDataView blockData={selectedBlockData(rawBlocks, selectedBlock)} />\n                </div>\n            );\n        } else return null;\n    };\n\n}\n","const findBlockWithId = (blockList, blockId) => {\n    if (!blockList) return;\n    for (let block of blockList) {\n        if (block.id === blockId) return block;\n        else {\n            const foundBlock = findBlockWithId(block.children, blockId);\n            if (foundBlock) return foundBlock;\n        }\n    }\n};\n\nexport const getActiveBlockTree = (state) => {\n    console.log(state.rootBlock, state.blocks);\n    if (state.rootBlock === state.blocks.id) return state.blocks;\n    return findBlockWithId(state.blocks.children, state.rootBlock);\n};\n","import {connect} from 'react-redux';\n\nimport {BlockBrowser} from './BlockBrowser.jsx';\nimport {changeRoot} from \"../../data/actions/courseBlocks\";\nimport {getActiveBlockTree} from '../../data/selectors/index';\n\nconst mapStateToProps = state => ({\n    rawBlocks: state.rawBlocks,\n    blocks: getActiveBlockTree(state),\n    selectedBlock: state.selectedBlock\n});\n\n\nconst mapDispatchToProps = dispatch => ({\n    onChangeRoot: blockId => dispatch(changeRoot(blockId)),\n});\n\n\nexport const BlockBrowserContainer = connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(BlockBrowser);\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { BlockBrowserContainer } from \"../BlockBrowser/BlockBrowserContainer\";\n\nexport default class Main extends React.Component {\n    static propTypes = {\n        selectedBlock: PropTypes.string.isRequired,\n        onSelectBlock: PropTypes.func.isRequired,\n        onDataChange: PropTypes.func.isRequired,\n        rawBlocks: PropTypes.string.isRequired,\n    };\n\n    onChangeBlocks = () => {\n        console.log(this.blockfield.value);\n        this.props.onDataChange(this.blockfield.value)\n    };\n\n    render() {\n        const { onSelectBlock, rawBlocks } = this.props;\n\n        return (\n            <div className=\"app\">\n                <div className=\"row\">\n                    <div className=\"help\">\n                        <p className=\"help\">\n                            This simple app lets you browse a course's block structure\n                            data obtained from the course blocks API by accessing it\n                            when logged in as a staff user with the following parameters:\n                            <br />\n                            <code>{\"/api/courses/v1/blocks/?course_id={course_id}&depth=all&all_blocks=true&requested_fields=children\"}</code>\n                        </p>\n                        <p className=\"help\">\n                            It should be safe to request additional details in the\n                            response, but 'children' is the bare minimum. You can see\n                            more options available for that API <a href=\"https://github.com/edx/edx-platform/blob/b77793da5fa19ef628851072cc31358fd7efbb20/lms/djangoapps/course_api/blocks/views.py#L42-L108\">here</a>.\n                        </p>\n                        <p className=\"help\">\n                            You should copy the data from that response, paste it in the\n                            text field marked \"Raw block data\", and click the 'Update' button.\n                    </p>\n                    </div>\n                    <div className=\"input\">\n                        <label htmlFor=\"blocks\">Raw block data</label>\n                        <textarea name=\"blocks\" id=\"blocks\" cols=\"30\" rows=\"10\"\n                            ref={(ref) => this.blockfield = ref}>\n                            {JSON.stringify(rawBlocks)}\n                        </textarea>\n                        <button onClick={this.onChangeBlocks}>Update</button>\n                    </div>\n                </div>\n                <BlockBrowserContainer onSelectBlock={onSelectBlock} />\n            </div>\n        );\n    }\n}\n","import {connect} from 'react-redux';\n\nimport Main from './Main.jsx';\nimport {selectBlock, setCourseBlocks} from \"../../data/actions/courseBlocks\";\n\nconst mapStateToProps = state => ({\n    selectedBlock: state.selectedBlock,\n    rawBlocks: state.rawBlocks,\n});\n\n\nconst mapDispatchToProps = dispatch => ({\n    onSelectBlock: blockId => dispatch(selectBlock(blockId)),\n    onDataChange: data => dispatch(setCourseBlocks(JSON.parse(data))),\n});\n\nconst MainContainer = connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(Main);\n\nexport default MainContainer;\n","import React from 'react';\n\nimport {Provider} from 'react-redux';\nimport store from './data/store';\n\nimport MainContainer from './components/Main/MainContainer.jsx';\n\nexport const ProblemBrowser = props => (\n    <Provider store={store}>\n        <MainContainer {...props} />\n    </Provider>\n);\n","import React, {Component} from 'react';\nimport {ProblemBrowser} from './ProblemBrowser';\nimport './App.css';\n\nclass App extends Component {\n    render() {\n        return (\n            <div className=\"App\">\n                <ProblemBrowser/>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Lets check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://goo.gl/SC7cgQ'\n                    );\n                });\n            } else {\n                // Is not local host. Just register service worker\n                registerValidSW(swUrl);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the old content will have been purged and\n                            // the fresh content will have been added to the cache.\n                            // It's the perfect time to display a \"New content is\n                            // available; please refresh.\" message in your web app.\n                            console.log('New content is available; please refresh.');\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            if (\n                response.status === 404 ||\n                response.headers.get('content-type').indexOf('javascript') === -1\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}