{"version":3,"sources":["ProblemBrowser/data/store.js","ProblemBrowser/data/actions/constants.js","ProblemBrowser/data/actions/courseBlocks.js","ProblemBrowser/data/reducers/index.js","ProblemBrowser/components/BlockBrowser/BlockBrowser.jsx","ProblemBrowser/data/selectors/index.js","ProblemBrowser/components/BlockBrowser/BlockBrowserContainer.jsx","ProblemBrowser/components/Main/Main.jsx","ProblemBrowser/components/Main/MainContainer.jsx","ProblemBrowser/index.jsx","App.js","registerServiceWorker.js","index.js"],"names":["initialState","courseBlocksActions","SUCCESS","FAILURE","setCourseBlocks","data","dispatch","blocks","type","combineReducers","rawBlocks","state","arguments","length","undefined","action","root","blockTree","parent","tree","Object","assign","children","map","block","buildBlockTree","selectedBlock","blockId","rootBlock","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","rootReducer","applyMiddleware","thunkMiddleware","selectedBlockData","rawblocks","console","log","concat","BlockList","_ref","onSelectBlock","onChangeRoot","react","className","key","id","classnames","selected","onClick","e","stopPropagation","display_name","preventDefault","BlockDataItem","_ref2","dataItem","startsWith","href","target","rel","Array","isArray","item","BlockBrowser_BlockDataView","blockData","String","BlockDataView","_ref3","keys","BlockBrowser_BlockDataItem","BlockBrowser","_React$Component","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","inherits","createClass","value","_this$props","props","BlockBrowser_BlockList","React","getActiveBlockTree","findBlockWithId","blockList","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","foundBlock","err","return","BlockBrowserContainer","connect","changeRoot","Main","onChangeBlocks","_this","blockfield","onDataChange","_this2","htmlFor","name","cols","rows","ref","JSON","stringify","MainContainer","selectBlock","parse","ProblemBrowser","react_default","a","createElement","es","Main_MainContainer","App","ProblemBrowser_ProblemBrowser","Component","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.dee1038f.chunk.js","sourcesContent":["import {applyMiddleware, createStore, compose} from 'redux';\nimport data from '../../data.json';\nimport thunkMiddleware from 'redux-thunk';\nimport {setCourseBlocks} from \"./actions/courseBlocks\";\n\nimport rootReducer from './reducers/index';\n\nconst defaultState = {\n    rawBlocks: {},\n    blocks: [],\n    selectedBlock: null,\n    rootBlock: null,\n};\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst configureStore = initialState => createStore(\n    rootReducer,\n    initialState,\n    composeEnhancers(applyMiddleware(thunkMiddleware)),\n\n);\n\n\nconst store = configureStore(defaultState);\n\nstore.dispatch(setCourseBlocks(data));\n\nexport default store;\n","export const courseBlocksActions = {\n    fetch: {\n        SUCCESS: 'FETCH_COURSE_BLOCKS_SUCCESS',\n        FAILURE: 'FETCH_COURSE_BLOCKS_FAILURE',\n    },\n    SELECT_BLOCK: 'SELECT_BLOCK',\n    CHANGE_ROOT: 'CHANGE_ROOT',\n};\n","import {courseBlocksActions} from './constants';\n\nconst setCourseBlocksSuccess = blocks => {\n    return {\n        type: courseBlocksActions.fetch.SUCCESS,\n        blocks,\n    };\n};\n\nconst selectBlock = blockId => ({\n    type: courseBlocksActions.SELECT_BLOCK,\n    blockId,\n});\n\nconst changeRoot = blockId => ({\n    type: courseBlocksActions.CHANGE_ROOT,\n    blockId,\n});\n\nconst setCourseBlocks = data => (dispatch) => {\n    dispatch(setCourseBlocksSuccess(data))\n};\n\nexport {\n    setCourseBlocks,\n    setCourseBlocksSuccess,\n    selectBlock,\n    changeRoot,\n};\n","import {combineReducers} from 'redux';\nimport {courseBlocksActions} from '../actions/constants';\n\nexport const buildBlockTree = (blocks) => {\n    if (!(blocks && blocks.root)) return null;\n    const blockTree = (root, parent) => {\n        const tree = Object.assign({parent}, blocks.blocks[root]);\n        if (tree.children) {\n            tree.children = tree.children.map(block => blockTree(block, root));\n        }\n        return tree;\n    };\n    return blockTree(blocks.root, null);\n};\n\nconst blocks = (state = {}, action) => {\n    switch (action.type) {\n        case courseBlocksActions.fetch.SUCCESS:\n            return buildBlockTree(action.blocks);\n        default:\n            return state;\n    }\n};\n\nconst rawBlocks = (state = {}, action) => {\n    switch (action.type) {\n        case courseBlocksActions.fetch.SUCCESS:\n            return action.blocks;\n        default:\n            return state;\n    }\n};\n\nconst selectedBlock = (state = null, action) => {\n    switch (action.type) {\n        case courseBlocksActions.fetch.SUCCESS:\n            return null;\n        case courseBlocksActions.SELECT_BLOCK:\n            return action.blockId;\n        default:\n            return state;\n    }\n};\n\n\nconst rootBlock = (state = null, action) => {\n    switch (action.type) {\n        case courseBlocksActions.fetch.SUCCESS:\n            return action.blocks.root;\n        case courseBlocksActions.CHANGE_ROOT:\n            return action.blockId;\n        default:\n            return state;\n    }\n};\n\nexport default combineReducers({\n    rawBlocks,\n    blocks,\n    selectedBlock,\n    rootBlock,\n});\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport * as classnames from 'classnames';\n\nfunction selectedBlockData(rawblocks, selectedBlock) {\n    if (rawblocks && rawblocks.blocks && selectedBlock) {\n        console.log(`Block data for ${selectedBlock}`, rawblocks.blocks[selectedBlock]);\n        return rawblocks.blocks[selectedBlock];\n    } else return {}\n}\n\n\nconst BlockList = ({ blocks, selectedBlock, onSelectBlock, onChangeRoot }) => (\n    <ul className=\"block-list\">\n        {blocks.map(block => (\n            <li key={block.id}\n                className={classnames(`block-type-${block.type}`, { selected: block.id === selectedBlock })}\n                onClick={(e) => {\n                    e.stopPropagation();\n                    onSelectBlock(block.id);\n                }}>\n                <button\n                    className=\"block-name\"\n                    onClick={() => onSelectBlock(block.id)}>{block.display_name}</button>\n                {block.children &&\n                    <button className=\"block-child\" onClick={(e) => {\n                        e.stopPropagation();\n                        e.preventDefault();\n                        onChangeRoot(block.id);\n                    }}>&gt;</button>\n                }\n            </li>\n        ))}\n    </ul>\n);\n\nconst BlockDataItem = ({ dataItem }) => {\n    switch (typeof dataItem) {\n        case 'string':\n            // TODO: if text starts with block-v1, add button to navigate to that block\n            if (dataItem.startsWith('http')) {\n                return (\n                    <a href={dataItem} target=\"_blank\" rel=\"noopener noreferrer\">\n                        {dataItem}\n                    </a>\n                );\n            } else return dataItem;\n        case 'object':\n            if (Array.isArray(dataItem)) {\n                return (\n                    <ul>\n                        {dataItem.map(item => (\n                            <li>\n                                <BlockDataItem dataItem={item} />\n                            </li>\n                        ))}\n                    </ul>\n                )\n            } else {\n                return <BlockDataView blockData={dataItem} />;\n            }\n        default:\n            return String(dataItem);\n    }\n\n}\n\n\nconst BlockDataView = ({ blockData }) => (\n    <div className='block-data'>\n        <table>\n            {Object.keys(blockData).map(key => (\n                <tr className='block-data-item'>\n                    <th>{key}</th>\n                    <td><BlockDataItem dataItem={blockData[key]} /></td>\n                </tr>\n            ))}\n        </table>\n    </div>\n)\n\nexport class BlockBrowser extends React.Component {\n    static propTypes = {\n        rawBlocks: PropTypes.object,\n        blocks: PropTypes.object,\n        selectedBlock: PropTypes.string,\n        onSelectBlock: PropTypes.func.isRequired,\n        onChangeRoot: PropTypes.func.isRequired,\n    };\n\n    render() {\n        const { blocks, rawBlocks, selectedBlock, onSelectBlock, onChangeRoot, className } = this.props;\n        if (blocks) {\n            return (\n                <div className={classnames(\"block-browser\", className)}>\n                    <div className=\"browser-container\">\n                        <div className=\"breadcrumb-container\">\n                            <button className=\"block-child\" onClick={(e) => {\n                                e.stopPropagation();\n                                if (blocks.parent) onChangeRoot(blocks.parent);\n                            }}> Up </button>\n                            <span className=\"block-type\"> {blocks.type}: </span>\n                            <span className=\"block-name\">{blocks.display_name} </span>\n                        </div>\n                        <BlockList blocks={blocks.children}\n                            selectedBlock={selectedBlock}\n                            onSelectBlock={onSelectBlock}\n                            onChangeRoot={onChangeRoot} />\n                    </div>\n                    <BlockDataView blockData={selectedBlockData(rawBlocks, selectedBlock)} />\n                </div>\n            );\n        } else return null;\n    };\n\n}\n","const findBlockWithId = (blockList, blockId) => {\n    if (!blockList) return;\n    for (let block of blockList) {\n        if (block.id === blockId) return block;\n        else {\n            const foundBlock = findBlockWithId(block.children, blockId);\n            if (foundBlock) return foundBlock;\n        }\n    }\n};\n\nexport const getActiveBlockTree = (state) => {\n    console.log(state.rootBlock, state.blocks);\n    if (state.rootBlock === state.blocks.id) return state.blocks;\n    return findBlockWithId(state.blocks.children, state.rootBlock);\n};\n","import {connect} from 'react-redux';\n\nimport {BlockBrowser} from './BlockBrowser.jsx';\nimport {changeRoot} from \"../../data/actions/courseBlocks\";\nimport {getActiveBlockTree} from '../../data/selectors/index';\n\nconst mapStateToProps = state => ({\n    rawBlocks: state.rawBlocks,\n    blocks: getActiveBlockTree(state),\n    selectedBlock: state.selectedBlock\n});\n\n\nconst mapDispatchToProps = dispatch => ({\n    onChangeRoot: blockId => dispatch(changeRoot(blockId)),\n});\n\n\nexport const BlockBrowserContainer = connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(BlockBrowser);\n","import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { BlockBrowserContainer } from \"../BlockBrowser/BlockBrowserContainer\";\n\nexport default class Main extends React.Component {\n    static propTypes = {\n        selectedBlock: PropTypes.string.isRequired,\n        onSelectBlock: PropTypes.func.isRequired,\n        onDataChange: PropTypes.func.isRequired,\n        rawBlocks: PropTypes.string.isRequired,\n    };\n\n    onChangeBlocks = () => {\n        console.log(this.blockfield.value);\n        this.props.onDataChange(this.blockfield.value)\n    };\n\n    render() {\n        const { onSelectBlock, rawBlocks } = this.props;\n\n        return (\n            <div className=\"app\">\n                <div className=\"row\">\n                    <div className=\"help\">\n                        <p className=\"help\">\n                            This simple app lets you browse a course's block structure\n                            data obtained from the course blocks API by accessing it\n                            when logged in as a staff user with the following parameters:\n                            <br />\n                            <code>{\"/api/courses/v1/blocks/?course_id={course_id}&depth=all&all_blocks=true&requested_fields=children\"}</code>\n                        </p>\n                        <p className=\"help\">\n                            It should be safe to request additional details in the\n                            response, but 'children' is the bare minimum. You can see\n                            more options available for that API <a href=\"https://github.com/edx/edx-platform/blob/b77793da5fa19ef628851072cc31358fd7efbb20/lms/djangoapps/course_api/blocks/views.py#L42-L108\">here</a>.\n                        </p>\n                        <p className=\"help\">\n                            You should copy the data from that response, paste it in the\n                            text field marked \"Raw block data\", and click the 'Update' button.\n                    </p>\n                    </div>\n                    <div className=\"input\">\n                        <label htmlFor=\"blocks\">Raw block data</label>\n                        <textarea name=\"blocks\" id=\"blocks\" cols=\"30\" rows=\"10\"\n                            ref={(ref) => this.blockfield = ref}>\n                            {JSON.stringify(rawBlocks)}\n                        </textarea>\n                        <button onClick={this.onChangeBlocks}>Update</button>\n                    </div>\n                </div>\n                <BlockBrowserContainer onSelectBlock={onSelectBlock} />\n            </div>\n        );\n    }\n}\n","import {connect} from 'react-redux';\n\nimport Main from './Main.jsx';\nimport {selectBlock, setCourseBlocks} from \"../../data/actions/courseBlocks\";\n\nconst mapStateToProps = state => ({\n    selectedBlock: state.selectedBlock,\n    rawBlocks: state.rawBlocks,\n});\n\n\nconst mapDispatchToProps = dispatch => ({\n    onSelectBlock: blockId => dispatch(selectBlock(blockId)),\n    onDataChange: data => dispatch(setCourseBlocks(JSON.parse(data))),\n});\n\nconst MainContainer = connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(Main);\n\nexport default MainContainer;\n","import React from 'react';\n\nimport {Provider} from 'react-redux';\nimport store from './data/store';\n\nimport MainContainer from './components/Main/MainContainer.jsx';\n\nexport const ProblemBrowser = props => (\n    <Provider store={store}>\n        <MainContainer {...props} />\n    </Provider>\n);\n","import React, {Component} from 'react';\nimport {ProblemBrowser} from './ProblemBrowser';\nimport './App.css';\n\nclass App extends Component {\n    render() {\n        return (\n            <div className=\"App\">\n                <ProblemBrowser/>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Lets check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://goo.gl/SC7cgQ'\n                    );\n                });\n            } else {\n                // Is not local host. Just register service worker\n                registerValidSW(swUrl);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the old content will have been purged and\n                            // the fresh content will have been added to the cache.\n                            // It's the perfect time to display a \"New content is\n                            // available; please refresh.\" message in your web app.\n                            console.log('New content is available; please refresh.');\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            if (\n                response.status === 404 ||\n                response.headers.get('content-type').indexOf('javascript') === -1\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}